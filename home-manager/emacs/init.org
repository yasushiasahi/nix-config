#+TITLE: My Configuration for GNU Emacs
#+AUTHOR: Yasushi Asahi
#+EMAIL: asahi1600@gmail.com
#+STARTUP: content

* Header
#+begin_src emacs-lisp :tangle yes
  ;;; init --- My init.el  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2025 Yasushi Asahi

  ;; Author: Yasushi Asahi <asahi1600@gmail.com>

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; My init.el.

  ;;; Code:
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
    (package-initialize))

  (use-package leaf :ensure t)

  (leaf *primitives
    :config
    (leaf exec-path-from-shell
      :doc "Get environment variables such as $PATH from the shell"
      :url "https://github.com/purcell/exec-path-from-shell"
      :ensure t
      :custom ((exec-path-from-shell-arguments . nil)
               (exec-path-from-shell-variables . '("PATH")))
      :config
      (exec-path-from-shell-initialize))

    (leaf autorevert
      :doc "revert buffers when files on disk change"
      :tag "builtin"
      :global-minor-mode global-auto-revert-mode)

    (leaf delsel
      :doc "delete selection if you insert"
      :tag "builtin"
      :global-minor-mode delete-selection-mode)

    (leaf undo-fu
      :doc "Undo helper with redo"
      :url "https://codeberg.org/ideasman42/emacs-undo-fu"
      :ensure t
      :custom ((undo-limit . 67108864)
               (undo-strong-limit . 100663296)
               (undo-outer-limit . 1006632960))
      :bind* (("C-/" . undo-fu-only-undo)
              ("C-?" . undo-fu-only-redo)))

    (leaf vundo
      :doc "Visual undo tree"
      :url "https://github.com/casouri/vundo"
      :ensure t
      :custom ((vundo-roll-back-on-quit . nil)
               (vundo-glyph-alist . vundo-unicode-symbols))
      :bind* ("C-M-/" . vundo))

    (leaf mule-cmds
      :doc "commands for multilingual environment"
      :config
      (set-language-environment "Japanese")
      (prefer-coding-system 'utf-8-unix))

    (leaf ns-win
      :doc "lisp side of interface with NeXT/Open/GNUstep/macOS window system"
      :when (and (memq window-system '(ns nil))
                 (fboundp 'mac-get-current-input-source))
      :hook ((input-method-deactivate-hook . my-set-cursor-abc-style)
             (input-method-activate-hook . my-set-cursor-japanese-style))
      :defun (my-set-cursor-japanese-style my-set-cursor-abc-style)
      :config
      ;; https://github.com/takaxp/ns-inline-patch?tab=readme-ov-file#how-to-us
      (setq mac-default-input-source "com.apple.inputmethod.Kotoeri.RomajiTyping.Japanese")
      (mac-input-method-mode 1)

      (defun my-set-cursor-japanese-style ()
        "カーソルを日本語入力時の見た目に変更する."
        (set-frame-parameter (window-frame) 'cursor-type 'hbar)
        (setf (alist-get 'cursor-color default-frame-alist) "#CE7667"))

      (defun my-set-cursor-abc-style ()
        "カーソルを英語の見た目に変更する."
        (set-frame-parameter (window-frame) 'cursor-type 'box)
        (setf (alist-get 'cursor-color default-frame-alist) "#888dbc"))

      (if (mac-ime-active-p)
          (my-set-cursor-japanese-style)
        (my-set-cursor-abc-style))
      )
    )

  (leaf *looks
    :config
    (leaf solarized-theme
      :doc "The Solarized color theme"
      :url "https://github.com/bbatsov/solarized-emacs"
      :ensure t
      :custom ((solarized-emphasize-indicators . nil)
               (solarized-use-less-bold . t))
      :config
      (load-theme 'solarized-dark t))

    (leaf nerd-icons
      :doc "nerdアイコンをいろんなところに表示できるようになる"
      :ensure t
      :require
      :config
                                          ; (nerd-icons-install-fonts t)
      (leaf nerd-icons-dired
        :doc "Shows icons for each file in dired mode"
        :url "https://github.com/rainstormstudio/nerd-icons-dired"
        :ensure t
        :hook (dired-mode-mode))
      )

    (leaf pulsar
      :doc "Pulse highlight on demand or after select functions"
      :url "https://github.com/protesilaos/pulsar"
      :ensure t
      :global-minor-mode pulsar-global-mode)

    (leaf mini-echo
      :doc "Echo buffer status in minibuffer window"
      :url "https://github.com/liuyinz/mini-echo.el"
      :ensure t
      :defvar (mini-echo-persistent-rule)
      :defun (eglot-current-server jsonrpc--process)
      :global-minor-mode t
      :custom ((mini-echo-persistent-rule . '(:long ("major-mode" "shrink-path" "vcs" "buffer-position" "eglot" "flymake")
                                                    :short ("buffer-name" "buffer-position" "flymake"))))
      :config
      (mini-echo-define-segment "eglot"
        "eglotのcurrent serverを表示する"
        :fetch
        (when-let ((_  (fboundp 'jsonrpc--process))
                   (_  (fboundp 'eglot-current-server))
                   (current-server (eglot-current-server)))
          (nth 4 (process-command (jsonrpc--process current-server)))))
      ;; (if (and (fboundp 'jsonrpc--process)
      ;;          (fboundp 'eglot-current-server))
      ;;     (let ((current-server (eglot-current-server)))
      ;;       (if current-server
      ;;           (nth 4 (process-command (jsonrpc--process current-server))))))
      )

    (leaf *meigen
      :config
      (leaf request
        :doc "Compatible layer for URL request"
        :url "https://github.com/tkf/emacs-request"
        :ensure t
        :config
        (defun display-startup-echo-area-message ()
          (request "https://meigen.doodlenote.net/api/json.php"
            :parser 'json-read
            :success (cl-function
                      (lambda (&key data &allow-other-keys)
                        (let* ((item (aref data 0))
                               (meigen (alist-get 'meigen item))
                               (auther (alist-get 'auther item)))
                          (message "%s\nby %s" meigen auther))))))
        )
      )
    )

  (leaf *key-binding
    :defun (my/beginning-of-line-text-or-line my/keyboard-quit-dwim)
    :config
    ;; C-hはバックスペースにする https://www.emacswiki.org/emacs/BackspaceKey
    (define-key key-translation-map [?\C-?] [?\C-h])
    (define-key key-translation-map [?\M-\d] [?\M-h])
    (define-key key-translation-map [?\C-h] [?\C-?])
    (define-key key-translation-map [?\M-h] [?\M-\d])


    (defun my/beginning-of-line-text-or-line ()
      "行の最初の文字の位置に移動。すでに最初の文字だったら行頭に移動。"
      (interactive)
      (let ((curr-point (point))                        ; コマンド実行前のカーソル位置
            (curr-column (current-column))) ; コマンド実行前の行番号
        (back-to-indentation)                       ; 一旦行の最初の文字の位置に移動
        (when (and (/= curr-column 0)         ; 元々行頭にいなかった
                   (<= curr-point (point))) ; 最初の文字の位置よりも前にいた
          (beginning-of-line))))            ; その場合は行頭に移動
    (define-key global-map (kbd "C-a") #'my/beginning-of-line-text-or-line)

    ;; https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/#h:83c8afc4-2359-4ebe-8b5c-f2e5257bdda3
    (defun my/keyboard-quit-dwim ()
      "Do-What-I-Mean behaviour for a general `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
      (interactive)
      (cond
       ((region-active-p)
        (keyboard-quit))
       ((derived-mode-p 'completion-list-mode)
        (delete-completion-window))
       ((> (minibuffer-depth) 0)
        (abort-recursive-edit))
       (t
        (keyboard-quit))))
    (define-key global-map (kbd "C-g") #'my/keyboard-quit-dwim)

    (leaf transient
      :doc "Transient commands."
      :url "https://github.com/magit/transient"
      :ensure t
      :require t
      :defvar (my/transient-window-operation)
      :defun (transient-define-prefix my/transient-window-operation)
      :bind (("C-t" . my/transient-window-operation-with-pulse)
             ("M-i" . my/transient-string-inflection))
      :config
      (transient-define-prefix my/transient-window-operation ()
        "Window Operation"
        :transient-suffix     'transient--do-stay
        :transient-non-suffix 'transient--do-exit
        [:class transient-columns
                ["Move"
                 ("p" "↑" windmove-up)
                 ("n" "↓" windmove-down)
                 ("b" "←" windmove-left)
                 ("f" "→" windmove-right)]
                ["Ajust"
                 ("<up>" "↑" shrink-window)
                 ("<down>" "↓" enlarge-window)
                 ("<left>" "←" shrink-window-horizontally)
                 ("<right>" "→" enlarge-window-horizontally)]
                ["Split"
                 ("\\" "vertical" split-window-right)
                 ("-" "horizontal" split-window-below)
                 ("s" "swap" window-swap-states)
                 ("e" "balance" balance-windows)]
                ["Ohter"
                 ("0" "delete" delete-window)
                 ("1" "only" delete-other-windows)
                 ("t" "maxmaiz" toggle-frame-maximized)]])
      (put 'my/transient-window-operation 'interactive-only nil)

      (defun my/transient-window-operation-with-pulse ()
        (interactive)
        (pulsar-highlight-line)
        (my/transient-window-operation))

      (leaf string-inflection
        :doc "Underscore>UPCASE>CamelCase>lowerCamelCase conversion"
        :url "https://github.com/akicho8/string-inflection"
        :ensure t
        :defvar (my/transient-string-inflection)
        :defun (string-inflection-underscore-function
                string-inflection-pascal-case-function
                string-inflection-camelcase-function
                string-inflection-camelcase-function
                string-inflection-upcase-function
                string-inflection-upcase-function
                string-inflection-kebab-case-function
                string-inflection-capital-underscore-function
                string-inflection-all-cycle)
        :config
        (transient-define-prefix my/transient-string-inflection ()
          "Window Operation"
          :transient-suffix     'transient--do-exit
          [:class transient-columns
                  ["Single word"
                   ("u" "EMACS" upcase-word)
                   ("d" "emacs" downcase-word)
                   ("c" "Emacs" capitalize-word)]
                  ["Mulchple Words"
                   ("m" "FooBar" string-inflection-camelcase)
                   ("l" "fooBar" string-inflection-lower-camelcase)
                   ("u" "foo_bar" string-inflection-underscore)
                   ("p" "Foo_Bar" string-inflection-capital-underscore)
                   ("s" "FOO_BAR" string-inflection-upcase)
                   ("k" "foo-bar" string-inflection-kebab-case)]
                  ["Cycle"
                   ("a" "cycle" string-inflection-all-cycle)]])
        )
      )

    (leaf which-key
      :doc "Display available keybindings in popup"
      :url "https://github.com/justbur/emacs-which-key"
      :ensure t
      :global-minor-mode t)
    )

  (leaf *utility-functions
    :config
    ;;; visual-replaceを試してみる
    ;; (leaf visual-regexp
    ;;   :doc "A regexp/replace command for Emacs with interactive visual feedback"
    ;;   :url "https://github.com/benma/visual-regexp.el/"
    ;;   :ensure t)

    (leaf visual-replace
      :doc "A prompt for replace-string and query-replace"
      :url "http://github.com/szermatt/visual-replace"
      :ensure t
      :global-minor-mode visual-replace-global-mode)

    (leaf restart-emacs
      :doc "Restart emacs from within emacs"
      :tag "convenience"
      :url "https://github.com/iqbalansari/restart-emacs"
      :ensure t
      :custom (restart-emacs-restore-frames . t))

    (leaf open-junk-file
      :doc "Open a junk (memo) file to try-and-error"
      :url "http://www.emacswiki.org/cgi-bin/wiki/download/open-junk-file.el"
      :ensure t
      :custom ((open-junk-file-format . "~/ghq/github.com/yasushiasahi/junkfiles/%Y/%m/%d-%H%M%S.")))
    )

  (leaf *programing-minar-modes
    :config
    (leaf rainbow-delimiters
      :doc "Highlight brackets according to their depth"
      :url "https://github.com/Fanael/rainbow-delimiters"
      :ensure t
      :hook prog-mode-hook)

    (leaf puni
      :doc "Parentheses Universalistic"
      :url "https://github.com/AmaiKinono/puni"
      :ensure t
      :global-minor-mode puni-global-mode
      :bind (;:puni-mode-map
             ("C-)" . puni-slurp-forward)
             ("C-}" . puni-barf-forward)
             ("M-(" . puni-wrap-round)
             ("M-s" . puni-splice)
             ("M-r" . puni-raise)
             ("M-U" . puni-splice-killing-backward)
             ("M-z" . puni-squeeze)
             ("C-=" . puni-expand-region))
      :config
      (leaf elec-pair
        :doc "Automatic parenthesis pairing"
        :tag "builtin"
        :global-minor-mode electric-pair-mode)
      )

    ;; (leaf flycheck
    ;;   :url "https://www.flycheck.org"
    ;;   :ensure t
    ;;   :global-minor-mode global-flycheck-mode)

    )

  (leaf *lsp
    :config
    (leaf eldoc-box
      :doc "Display documentation in childframe"
      :url "https://github.com/casouri/eldoc-box"
      :ensure t
      :defun (eldoc-box-prettify-ts-errors)
      :custom ((eldoc-box-clear-with-C-g . t))
      :bind (("C-c d" . eldoc-box-help-at-point))
      :config
      ;; TODO typescript以外のプロジェクトの時にこれ有効にしちゃダメよね
      (add-hook 'eldoc-box-buffer-setup-hook #'eldoc-box-prettify-ts-errors 0 t))

    (leaf lsp-mode
      :doc "LSP mode"
      :url "https://github.com/emacs-lsp/lsp-mode"
      :ensure t
      :defvar (lsp-use-plists)
      :hook ((lsp-mode-hook . lsp-enable-which-key-integration)
             (lsp-completion-mode-hook . my/lsp-mode-setup-completion))
      :bind (:lsp-mode-map
             ("C-c d" . eldoc-box-help-at-point))
      :custom ((lsp-keymap-prefix . "C-c l")
               (lsp-diagnostics-provider . :flymake)
               (lsp-completion-provider . :none)
               (lsp-enable-snippet . nil)
               (lsp-headerline-breadcrumb-enable . nil)
               (lsp-enable-dap-auto-configure . nil)
               (lsp-enable-folding . nil)
               (lsp-enable-indentation . nil)
               (lsp-enable-suggest-server-download . nil)
               (textDocument/documentColor . nil)
               (lsp-before-save-edits . nil)
               (lsp-lens-enable . nil) ; rustのときはtにしたい
               (lsp-modeline-code-actions-enable . nil)
               (lsp-apply-edits-after-file-operations . nil) ; https://www.reddit.com/r/emacs/comments/1b0ppls/anyone_using_lspmode_with_tsls_having_trouble/
               (lsp-disabled-clients . (tailwindcss))
               ;; eslint
               (lsp-eslint-server-command . '("vscode-eslint-language-server" "--stdio"))
               )
      :init

      (setopt lsp-eldoc-render-all t)

      (defun my/lsp-mode-setup-completion ()
        (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
              '(orderless)))
      :config
      (leaf lsp-tailwindcss
        :doc "A lsp-mode client for tailwindcss"
        :url "https://github.com/merrickluo/lsp-tailwindcss"
        :ensure t
        :custom ((lsp-tailwindcss-server-version . "0.14.4")
                 (lsp-tailwindcss-major-modes . '(jtsx-jsx-mode jtsx-tsx-mode astro-ts-mode html-ts-mode))
                 (lsp-tailwindcss-skip-config-check . t))
        :defun (lsp-workspace-root
                lsp-tailwindcss--has-config-file
                lsp-register-client
                make-lsp-client
                lsp-stdio-connection
                lsp-tailwindcss--activate-p
                lsp-tailwindcss--initialization-options)
        :config
        ;; nixで入れたtailwindcss-language-serverを適用できるオプションがないので、本体を参考に自分で定義する。
        (lsp-register-client (make-lsp-client
                              :new-connection (lsp-stdio-connection
                                               (lambda ()
                                                 `("tailwindcss-language-server" "--stdio")))
                              :activation-fn #'lsp-tailwindcss--activate-p
                              :server-id 'my/tailwindcss
                              :priority -1
                              :add-on? t
                              :initialization-options #'lsp-tailwindcss--initialization-options)))

      ;; (leaf lsp-snippet
      ;;   :doc "lsp-modeとtempelのインテグレーション"
      ;;   :vc (:url "https://github.com/svaante/lsp-snippet")
      ;;   :defun (lsp-snippet-tempel-lsp-mode-init)
      ;;   :config
      ;;   (when (featurep 'lsp-mode)
      ;;     (lsp-snippet-tempel-lsp-mode-init)))

      (leaf *emacs-lsp-booster
        :defun (lsp-booster--advice-json-parse lsp-booster--advice-final-command)
        :config
        (defun lsp-booster--advice-json-parse (old-fn &rest args)
          "Try to parse bytecode instead of json."
          (or
           (when (equal (following-char) ?#)
             (let ((bytecode (read (current-buffer))))
               (when (byte-code-function-p bytecode)
                 (funcall bytecode))))
           (apply old-fn args)))
        (advice-add (if (progn (require 'json)
                               (fboundp 'json-parse-buffer))
                        'json-parse-buffer
                      'json-read)
                    :around
                    #'lsp-booster--advice-json-parse)

        (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
          "Prepend emacs-lsp-booster command to lsp CMD."
          (let ((orig-result (funcall old-fn cmd test?)))
            (if (and (not test?)                             ;; for check lsp-server-present?
                     (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
                     lsp-use-plists
                     (not (functionp 'json-rpc-connection))  ;; native json-rpc
                     (executable-find "emacs-lsp-booster"))
                (progn
                  (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
                    (setcar orig-result command-from-exec-path))
                  (message "Using emacs-lsp-booster for %s!" orig-result)
                  (cons "emacs-lsp-booster" orig-result))
              orig-result)))
        (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))
      )
    )

  (leaf *major-modes
    :config
    (leaf treesit
      :doc "tree-sitter utilities"
      :tag "builtin"
      :defvar (treesit-language-source-alist)
      :mode (("\\.html\\'" . html-ts-mode)
             ("\\.css\\'" . css-ts-mode)
             ("\\.scss\\'" . scss-ts-mode)
             ("\\.ya?ml\\'" . yaml-ts-mode)
             ("\\.toml\\'" . toml-ts-mode)
             ("\\.json\\'" . json-ts-mode)
             ("\\.php\\'" . php-ts-mode)
             ("\\Dockerfile\\'" . dockerfile-ts-mode)
             ("\\make\\'" . cmake-ts-mode))
      :custom (treesit-font-lock-level . 4)
      :config
      ;; astro意外nixで入れている
      (let ((treesit-language-source-alist  '((astro "https://github.com/virchau13/tree-sitter-astro"))))
        (mapc (lambda (lang)
                (unless (treesit-language-available-p lang nil)
                  (treesit-install-language-grammar lang)))
              (mapcar #'car treesit-language-source-alist)))

      ;; scss-ts-modeを定義する。apheleiaで引っかけるだけもの目的。
      (define-derived-mode scss-ts-mode css-ts-mode "SCSS")
      )

    (leaf macrostep
      :doc "マクロを展開する。leafがどう実行されるのか確認できる。"
      :ensure t)

    (leaf leaf-convert
      :doc "Convert many format to leaf format"
      :commands leaf-convert-insert-template
      :ensure t)

    (leaf leaf-tree
      :ensure t
      :custom (imenu-list-sizeleaf-tree-click-group-to-hide . t))

    (leaf aggressive-indent
      :doc "Minor mode to aggressively keep your code always indented."
      :url "https://github.com/Malabarba/aggressive-indent-mode"
      :ensure t
      :hook (emacs-lisp-mode-hook))

    (leaf elisp-mode
      :doc "Emacs Lisp mode"
      :hook ((emacs-lisp-mode-hook . my/setup-emacs-lisp-mode))
      :config

      (defun my/setup-emacs-lisp-mode ()
        "保存前に行末のスペースを削除"
        (add-hook 'before-save-hook 'delete-trailing-whitespace nil 'make-it-local))
      )

    (leaf css-mode
      :doc "Major mode to edit CSS files"
      :custom ((css-indent-offset . 2)))

    (leaf nix-ts-mode
      :doc "Major mode for Nix expressions, powered by tree-sitter"
      :url "https://github.com/nix-community/nix-ts-mode"
      :ensure t
      :mode ("\\.nix\\'"))

    )
#+end_src
* 雑多なグローバル設定
** ビルトインの設定
#+begin_src emacs-lisp :tangle yes
  (leaf cus-start
    :config
    ;;; buffer.c
    ;; タブの幅。各言語のモードのタブはばは別でそのモードの設定でそれぞれ設定しないといけない。
    (setopt tab-width 2)
    ;; yesと打たずにyだけで答える
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;;; minibuf.c
    ;; [vertico]ミニバッファ内で新たにミニバッファを開けるようにする
    (setq enable-recursive-minibuffers t)
    ;; [vertico]正直よくわからない。後日検証。readmeのおすすめ設定に載っているのでとりあえず書いておく。
    (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
    ;; [vertico]ignore-caseにバッファをミニバッファ補完
    (setq read-buffer-completion-ignore-case t)
    ;; [vertico]ignore-caseにコマンドをミニバッファ補完
    (setq completion-ignore-case t))

#+end_src
** 基本的なコマンド
#+begin_src emacs-lisp :tangle yes
  (leaf simple
    :config
    ;; read-onlyなテキストをkilしようとしても警告を表示しない
    (setopt kill-read-only-ok t)
    ;; 行頭でC-k(kill-line)したときにその行自体を消す
    (setopt kill-whole-line nil)
    ;; [vertico]M-xで表示される候補を現在のモードで実行可能なコマンドだけに限定する
    (setopt read-extended-command-predicate #'command-completion-default-include-p))
#+end_src
** [[https://github.com/emacscollective/no-littering][no-littering]] emacs設定ディレクトリを綺麗に保つ
#+begin_src emacs-lisp :tangle yes
  (leaf no-littering
    :doc "組み込みor外部に関わらず、パッケージが作り出す設定ファイルを整頓して、.config/emacs配下を綺麗に保つ"
    :url "https://github.com/emacscollective/no-littering"
    :ensure t
    :defvar (no-littering-var-directory no-littering-etc-directory)
    :config
    ;; Lock files
    (let ((dir (no-littering-expand-var-file-name "lock-files/")))
      (make-directory dir t)
      (setq lock-file-name-transforms `((".*" ,dir t))))

    ;; Saved customizations
    (setq custom-file (no-littering-expand-var-file-name "custom.el"))

    (leaf recentf
      :doc "開いたファイルの履歴を保存しておく機能"
      :tag "builtin"
      :custom ((recentf-max-saved-items . 100))
      :hook ((emacs-startup-hook . recentf-mode))
      :defvar (recentf-exclude)
      :defun (recentf-expand-file-name)
      :config
      ;; no-littering配下ファイルは除外
      ;; https://github.com/emacscollective/no-littering?tab=readme-ov-file#recent-files
      (add-to-list 'recentf-exclude
                   (recentf-expand-file-name no-littering-var-directory))
      (add-to-list 'recentf-exclude
                   (recentf-expand-file-name no-littering-etc-directory))
      )

    (leaf files
      :doc "file input and output commands for Emacs"
      :custom ((version-control . t)
               (delete-old-versions . t))
      :config
      ;; Auto-save, backup and undo-tree files
      (no-littering-theme-backups)
      ;; .dir-locals.el読み込み時の警告を抑制する
      (add-to-list 'safe-local-variable-values '(eval . (eglot-ensure)))
      (add-to-list 'safe-local-variable-values '(eval . (lsp-deferred)))
      (add-to-list 'safe-local-variable-values '(eval . (apheleia-mode))))
    )
#+end_src
** タブ文字を使用しない
ちなみに、untabifyでバッファ無いの全てのタブをスペースに置き換えられる。tabifyはその逆。
#+begin_src emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+end_src
** 一時的なフォントサイズの変更方法
普段は限界までフォントサイズを小さくしているが、画面共有などで他人にEmacsを見てもらう時に便利。
以前までは、C-<wheel-up>, C-<wheel-down>で変更していたけど、これだとバッファローカルになる。
グローバルに変更するにはvim-jpで見かけた以下をやる。
mouse-wheel-global-text-scale。 C-M-<wheel-up>, C-M-<wheel-down> でもサイズ変更できる。
#+begin_src emacs-lisp :tangle yes
  (leaf face-remap
    :doc "Functions for managing `face-remapping-alist'"
    :tag "builtin"
    :added "2024-07-01"
    :custom ((text-scale-mode-step . 2))
    :bind (("C-x M-=" . global-text-scale-adjust)
           ("C-x M-0" . global-text-scale-adjust)
           ("C-x M-+" . global-text-scale-adjust)
           ("C-x M--" . global-text-scale-adjust)))
#+end_src
** describe-*した時*HELP*バッファのウィンドウにフォーカスする。
こうしておくとqですぐに閉じられる。
この設定をまではわざわざ*HELP*のウィンドウまで移動しないと閉じられなくて、気軽にdescribe-*できなかった。
#+begin_src emacs-lisp :tangle yes
  (leaf help
    :doc "help commands for Emacs"
    :tag "builtin" "internal" "help"
    :require t
    :config
    (setopt help-window-select t))
#+end_src
** auth-source Emacsデフォルトのシークレット管理
#+begin_src emacs-lisp :tangle yes
  (leaf auth-source
    :config
    (setopt auth-sources '("~/.authinfo")))
#+end_src
* ユーティリティー
** [[https://github.com/Wilfred/helpful][Helpful]] より見やすい*help*バッファー
#+begin_src emacs-lisp :tangle yes
  (leaf helpful
    :doc "A better *help* buffer"
    :ensure t
    :bind (([remap describe-function] . helpful-callable)
           ([remap describe-variable] . helpful-variable)
           ([remap describe-key]      . helpful-key)
           ([remap describe-command] . helpful-command)
           ([remap Info-goto-emacs-command-node] . helpful-function)
           ("C-c C-d" . helpful-at-point)))
#+end_src
** [[https://github.com/abo-abo/avy][avy]] 劇的にカーソル移動を早くする
[[https://emacs-jp.github.io/tips/avy-can-do-anything][Avyならなんでもできる]]
#+begin_src emacs-lisp :tangle yes
  (leaf avy
    :ensure t
    :bind (("C-s" . avy-goto-char-timer))
    :config
    (setopt avy-background t))
#+end_src
** [[https://github.com/lorniu/go-translate][go-translate]] 翻訳
#+begin_src emacs-lisp :tangle yes
  (leaf go-translate
    :ensure t
    :bind (("C-c t" . gt-do-translate))
    :config
    (setopt gt-langs `(en ja))
    (setopt gt-default-translator (gt-translator
                                   :engines (gt-deepl-engine
                                             :key (auth-source-pick-first-password
                                                   :host "deepl.com"
                                                   :user "asahi1600@gmail.com"
                                                   :port "deepl-api-key"))
                                   :render (gt-buffer-render)))
    (setopt gt-buffer-render-follow-p t))
#+end_src
** yasnippet
#+begin_src emacs-lisp :tangle yes
  (leaf yasnippet
    :doc "Yet another snippet extension for Emacs"
    :url "http://github.com/joaotavora/yasnippet"
    :ensure t
    :config
    (yas-global-mode 1)

    (leaf yasnippet-snippets
      :doc "Collection of yasnippet snippets"
      :url "https://github.com/AndreaCrotti/yasnippet-snippets"
      :ensure t))

  (leaf consult-yasnippet
    :doc "A consulting-read interface for yasnippet"
    :url "https://github.com/mohkale/consult-yasnippet"
    :ensure t
    :after yasnippet consult)


#+end_src
** flymake
#+begin_src emacs-lisp :tangle yes
  (leaf flymake
    :doc "A universal on-the-fly syntax checker"
    :tag "builtin"
    :hook (prog-mode-hook conf-mode-hook))
#+end_src
*** flymake-eslint
#+begin_src emacs-lisp :tangle yes
  ;; (leaf flymake-eslint
  ;;   :ensure t
  ;;   :hook ((eglot-managed-mode-hook . my/setup-flymake-eslint))
  ;;   :config
  ;;   (defun my/eslint-config-p ()
  ;;     "ディレクトリを遡ってESLintのconfigを探索する"
  ;;     (if-let* ((current-path  (file-name-directory (buffer-file-name)))
  ;;               (path-list  (split-string (string-trim current-path "/" "/") "/"))
  ;;               (idx-list (seq-map-indexed (lambda (_ i) i)
  ;;                                          path-list))
  ;;               (list-length (seq-length path-list)))
  ;;         (seq-some (lambda (idx)
  ;;                     (let* ((sliced (cl-subseq path-list 0 (- list-length idx)))
  ;;                            (seq-path  (concat "/" (string-join sliced "/"))))
  ;;                       (directory-files seq-path nil "eslint")))
  ;;                   idx-list)))

  ;;   (defun my/setup-flymake-eslint ()
  ;;     "eglotのbufferがtsかjsでそのプロジェクトがeslintの設定ファイルを持っているなら、flymakeにeslintを設定する"
  ;;     (when (and (or (derived-mode-p 'typescript-ts-mode)
  ;;                    (derived-mode-p 'js-ts-mode))
  ;;                (my/eslint-config-p)
  ;;                (executable-find "eslint"))
  ;;       (flymake-eslint-enable))))
#+end_src
* 補完インターフェイス minadさんシリーズ
** [[https://github.com/oantolin/orderless][orderless]] 順不同のテキストマッチングスタイル
#+begin_src emacs-lisp :tangle yes
  (leaf orderless
    :ensure t
    :config
    (setopt completion-styles '(orderless basic))
    (setopt completion-category-defaults nil)
    (setopt completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** [[https://github.com/minad/marginalia][marginalia]] 補完候補により多くの情報を表示する
#+begin_src emacs-lisp :tangle yes
  (leaf marginalia
    :doc "Enrich existing commands with completion annotations"
    :url "https://github.com/minad/marginalia"
    :ensure t
    :global-minor-mode t
    :config
    (leaf nerd-icons-completion
      :doc "Add icons to completion candidates"
      :url "https://github.com/rainstormstudio/nerd-icons-completion"
      :ensure t
      :global-minor-mode t
      :hook (marginalia-mode-hook . nerd-icons-completion-marginalia-setup)))
#+end_src
** [[https://github.com/oantolin/embark][embark]] ミニバッファ補完の選択肢に対して右クリック的な操作を行える
#+begin_src emacs-lisp :tangle yes
  (leaf embark
    :ensure t
    :bind (("C-." . embark-act)         ;; pick some comfortable binding
           ("C-;" . embark-dwim)        ;; good alternative: M-.
           ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly))
#+end_src
** grepの結果を編集する [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]
#+begin_src emacs-lisp :tangle yes
  (leaf wgrep
    :ensure t)
#+end_src
** [[https://github.com/minad/vertico][vertico]] ミニバッファ補完インターフェイス
#+begin_src emacs-lisp :tangle yes
  (leaf vertico
    :ensure t
    :require t
    :bind (("s-SPC" . my/vertico-restrict-to-matches))
    :config
    (setopt vertico-count 30)
    (vertico-mode)

    (defun my/vertico-restrict-to-matches ()
      "現在マッチしている候補のみに選択肢を絞った状態でプロンプトをクリアする。

  実際にはクリアしているわけではない。
  https://github.com/minad/vertico/wiki#restrict-the-set-of-candidates"
      (interactive)
      (let ((inhibit-read-only t))
        (goto-char (point-max))
        (insert " ")
        (add-text-properties (minibuffer-prompt-end) (point-max)
                             '(invisible t read-only t cursor-intangible t rear-nonsticky t))))

    ;; 選択行に猫を表示する
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (defvar +vertico-current-arrow t)
    (cl-defmethod vertico--format-candidate :around
      (cand prefix suffix index start &context ((and +vertico-current-arrow
                                                     (not (bound-and-true-p vertico-flat-mode)))
                                                (eql t)))
      (setq cand (cl-call-next-method cand prefix suffix index start))
      (let ((cat (nerd-icons-faicon "nf-fa-cat"))
            (blank (nerd-icons-codicon "nf-cod-blank")))
        (if (bound-and-true-p vertico-grid-mode)
            (if (= vertico--index index)
                (concat cat " " cand)
              (concat blank " " cand))
          (if (= vertico--index index)
              (concat cat " " cand)
            (concat blank " " cand))))))
#+end_src

=vertico-multiform= 補完候補の表示方法をインタラクティブに変更できる
| =M-B= | ~vertico-multiform-buffer~      |
| =M-F= | ~vertico-multiform-flat~        |
| =M-G= | ~vertico-multiform-grid~        |
| =M-R= | ~vertico-multiform-reverse~     |
| =M-U= | ~vertico-multiform-unobtrusive~ |
| =M-V= | ~vertico-multiform-vertical~    |
#+begin_src emacs-lisp :tangle yes
(leaf vertico-multiform
    :require t
    :config
    (vertico-multiform-mode))
#+end_src

=vertico-buffer= mini bufferではなくbufferで補完を開く
#+begin_src emacs-lisp :tangle yes
(leaf vertico-buffer
    :require t
    :config
    (setopt vertico-buffer-display-action (lambda () (display-buffer-in-direction
                                                      (direction . right)))))
#+end_src

=vertico-directory= C-fが扱いやすくなる
#+begin_src emacs-lisp :tangle yes
(leaf vertico-directory
    :require t
    :bind (vertico-map
           ("RET" . vertico-directory-enter)
           ("DEL" . vertico-directory-delete-char)
           ("M-DEL" . vertico-directory-delete-word))
    :hook ((rfn-eshadow-update-overlay-hook . vertico-directory-tidy)))
#+end_src

*** ミニバッファの履歴を永続化する
#+begin_src emacs-lisp :tangle yes
  (leaf savehist
    :config
    (savehist-mode 1))
#+end_src

*** その他ミニバッファ関連
#+begin_src emacs-lisp :tangle yes
  (leaf minibuffer
    :config
    ;; ミニバッファ補完時にファイル名をignore-caseにマッチさせる
    (setopt read-file-name-completion-ignore-case t))
#+end_src
** [[https://github.com/minad/corfu][corfu]] コード補完
#+begin_src emacs-lisp :tangle yes
  (leaf hotfuzz
    :doc "Fuzzy completion style."
    :url "https://github.com/axelf4/hotfuzz"
    :ensure t)

  (leaf corfu
    :doc "コード補完機能"
    :ensure t
    :require t
    :bind ((corfu-map
            ("M-SPC" . corfu-insert-separator)))
    :hook ((corfu-mode-hook
            . (lambda () (setq-local completion-styles '(hotfuzz)))))
    :config
    (setopt corfu-auto t)
    (setopt corfu-auto-delay 0.0)
    (setopt corfu-auto-prefix 1)
    (setopt corfu-popupinfo-delay 0.0)
    (setopt tab-always-indent 'complete)
    (setopt text-mode-ispell-word-completion nil)
    (setopt read-extended-command-predicate #'command-completion-default-include-p)

    (global-corfu-mode)
    (corfu-popupinfo-mode)
    (corfu-history-mode))
#+end_src
*** corfuの補完候補にアイコンを表示する [[https://github.com/LuigiPiucco/nerd-icons-corfu][nerd-icons-corfu]]
#+begin_src emacs-lisp :tangle yes
  (leaf nerd-icons-corfu
    :ensure t
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
** 便利な補完機能をたくさん提供してくれる [[https://github.com/minad/consult][consult]]
#+begin_src emacs-lisp :tangle yes
  (leaf consult
    :doc "Consulting completing-read"
    :url "https://github.com/minad/consult"
    :ensure t
    :defun (consult-customize consult--read)
    :bind* (;; C-c bindings in `mode-specific-map'
            ("C-c M-x" . consult-mode-command)
            ;; C-x bindings in `ctl-x-map'
            ("C-x b" . consult-buffer)
            ("C-x M-p" . consult-project-buffer)
            ("C-x C-g" . my/consult-ghq-magit-status)
            ("C-x M-s" . consult-yasnippet)
            ;; Other custom bindings
            ("M-y" . consult-yank-pop)
            ;; M-g bindings in `goto-map'
            ("M-g f" . consult-flymake)
            ("M-g g" . consult-goto-line)
            ("M-g m" . consult-mark)
            ("M-g k" . consult-global-mark)
            ("M-g i" . consult-imenu)
            ("M-g I" . consult-imenu-multi)
            ("M-g o" . consult-outline)
            ;; M-s bindings in `search-map'
            ("M-s d" . consult-fd)
            ("M-s g d" . my-consult-ghq-fd)
            ("M-s c" . consult-locate)
            ("M-s r" . consult-ripgrep)
            ("M-s g r" . my-consult-ghq-ripgrep)
            ("M-s l" . consult-line)
            ("M-s L" . consult-line-multi))
    :hook (completion-list-mode-hook . consult-preview-at-point-mode)
    :custom ((xref-show-xrefs-function . #'consult-xref)
             (xref-show-definitions-function . #'consult-xref))
    :config
    (leaf *consult-ghq
      :defun (buffer-substring-no-propertie my-consult-ghq--list-candidates my-consult-ghq--read consult--file-preview)
      :config
      (defun my-consult-ghq--list-candidates ()
        "ghq listの結果をリストで返す"
        (with-temp-buffer
          (unless (zerop (apply #'call-process "ghq" nil t nil '("list" "--full-path")))
            (error "Failed: Cannot get ghq list candidates"))
          (let ((paths))
            (goto-char (point-min))
            (while (not (eobp))
              (push (buffer-substring-no-properties
                     (line-beginning-position)
                     (line-end-position))
                    paths)
              (forward-line 1))
            (nreverse paths))))
      (defun my-consult-ghq--read ()
        "ghq管理のリポジトリ一覧から選ぶ"
        (consult--read (my-consult-ghq--list-candidates)
                       :state (consult--file-preview)
                       :prompt "ghq: "
                       :category 'file))
      (defun my-consult-ghq-fd ()
        "ghq管理のリポジトリ一覧から選び、プロジェクト内ファイル検索"
        (interactive)
        (consult-fd (my-consult-ghq--read)))
      (defun my-consult-ghq-ripgrep ()
        "ghq管理のリポジトリ一覧から選び、プロジェクト内でripgrep"
        (interactive)
        (consult-ripgrep (my-consult-ghq--read)))
      (defun my/consult-ghq-magit-status ()
        "ghq管理のリポジトリ一覧から選び、magit statusを開く"
        (interactive)
        (magit-status (my-consult-ghq--read))))

    (defun my-consult-switch-buffer-kill ()
      "Kill candidate buffer at point within the minibuffer completion."
      (interactive)
      ;; The vertico--candidate has a irregular char at the end.
      (let ((name  (substring (vertico--candidate) 0 -1)))
        (when (bufferp (get-buffer name))
          (kill-buffer name))))
    )
#+end_src
*** ghコマンドと通じてgithubを操作する [[https://github.com/armindarvish/consult-gh][consult-gh]]
#+begin_src emacs-lisp :tangle yes
  (leaf consult-gh
    :ensure t
    :bind (("C-x M-r" . consult-gh-transient))
    :config
    (require 'consult-gh-transient)

    (setopt consult-gh-default-clone-directory "~/ghq/github.com")
    (setopt consult-gh-show-preview t)
    (setopt consult-gh-preview-key "C-o")
    (setopt consult-gh-repo-action #'consult-gh--repo-browse-files-action)
    (setopt consult-gh-issue-action #'consult-gh--issue-view-action)
    (setopt consult-gh-pr-action #'consult-gh--pr-view-action)
    (setopt consult-gh-code-action #'consult-gh--code-view-action)
    (setopt consult-gh-file-action #'consult-gh--files-view-action)
    (setopt consult-gh-notifications-action #'consult-gh--notifications-action)
    (setopt consult-gh-dashboard-action #'consult-gh--dashboard-action)
    (setopt consult-gh-default-interactive-command #'consult-gh-transient)
    (setopt consult-gh-large-file-warning-threshold 2500000)
    (setopt consult-gh-favorite-orgs-list '("karabiner-inc" "deltaXinc" ))

    (add-to-list 'savehist-additional-variables 'consult-gh--known-orgs-list) ;;keep record of searched orgs
    (add-to-list 'savehist-additional-variables 'consult-gh--known-repos-list) ;;keep record of searched repos
    (consult-gh-enable-default-keybindings))

  (leaf consult-gh-forge
    :ensure t
    :after consult forge consult-gh
    :config
    (consult-gh-forge-mode +1)
    (setopt consult-gh-forge-timeout-seconds 20))

  (leaf consult-gh-embark
    :ensure t
    :after consult consult-gh embark-consult
    :config
    (consult-gh-embark-mode +1))

  (leaf pr-review
    :ensure t)

  (leaf consult-gh-with-pr-review
    :ensure t)
#+end_src
*** embarkインテグレーション [[https://github.com/oantolin/embark/tree/master?tab=readme-ov-file#consult][embark-consult]]
#+begin_src emacs-lisp :tangle yes
  (leaf embark-consult
    :ensure t
    :require t
    :hook (embark-collect-mode-hook . consult-preview-at-point-mode))
#+end_src
*** ブラウザの履歴を検索する [[https://github.com/agzam/browser-hist.el][browser-hist.el]]

=browser-hist-default-browser= というカスタマイズ変数があるのだが =:type '(chrome chromium brave firefox safari qutebrowser)= となっていてvivaldiに設定できないので、デフォルトのchromeのpathをvivaldiにする。
#+begin_src emacs-lisp :tangle yes
  (leaf browser-hist
    :ensure t
    :config
    (setopt browser-hist-db-paths '((chrome . "$HOME/Library/Application Support/Vivaldi/Default/History"))))
#+end_src
*** あらゆる検索の入り口 [[https://github.com/armindarvish/consult-omni][consult-omni]]
#+begin_src emacs-lisp :tangle yes
  (leaf consult-omni
    :ensure t
    :config
    (setq consult-omni-show-preview t)
    (setq consult-omni-preview-key "C-o")
    (setq consult-omni-default-preview-function #'xwidget-webkit-browse-url)

    (require 'consult-omni-embark)

    ;; Load Sources Core code
    (require 'consult-omni-sources)
    (require 'consult-omni-ripgrep-all)
    (require 'consult-omni-fd)
    (require 'consult-omni-browser-history)
    (require 'consult-omni-google-autosuggest)
    ;; brave seach
    (require 'consult-omni-brave)
    (setopt consult-omni-brave-api-key (auth-source-pick-first-password
                                        :host "search.brave.com"
                                        :user "asahi1600@gmail.com"))
    ;; wiki search
    (require 'consult-omni-wikipedia)
    (setq consult-omni-wikipedia-url "https://ja.wikipedia.org/")              ; なぜかdefverで宣言されている
    (setq consult-omni-wikipedia-api-url "https://ja.wikipedia.org/w/api.php") ; なぜかdefverで宣言されている
    ;; app search
    (require 'consult-omni-apps)
    (setopt consult-omni-apps-paths (cons "~/Applications/Home Manager Apps/" consult-omni-apps-paths)))

#+end_src
* git
** [[https://magit.vc/][magit]] gitクライアント
#+begin_src emacs-lisp :tangle yes
  (leaf magit
    :ensure t)
#+end_src
*** [[https://magit.vc/manual/forge.html][forge]] magitからgithubを操作する
#+begin_src emacs-lisp :tangle yes
  (leaf forge
    :ensure t
    :config
    (setopt forge-buffer-draft-p t))
#+end_src
** [[https://github.com/dgutov/diff-hl][diff-hl]] 行頭にgitのステータスを表示する
#+begin_src emacs-lisp :tangle yes
  (leaf diff-hl
    :ensure t
    :hook ((magit-post-refresh-hook . diff-hl-magit-post-refresh)
           (dired-mode-hook . diff-hl-dired-mode))
    :config
    (global-diff-hl-mode)
    (global-diff-hl-show-hunk-mouse-mode))
#+end_src
** [[https://github.com/sshaw/git-link][git-link]] 現在開いているブランチ/ファイル/行のgithubのを作る
#+begin_src emacs-lisp :tangle yes
  (leaf git-link
    :ensure t)
#+end_src
** [[https://github.com/redguardtoo/vc-msg][vc-msg]] 現在行の直近のコミットを表示する
#+begin_src emacs-lisp :tangle yes
  (leaf vc-msg
    :ensure t)
#+end_src

* マイナーモード
** [[https://github.com/radian-software/apheleia][apheleia]] いろんな言語のフォーマッターインテグレーション
#+begin_src emacs-lisp :tangle yes
  (leaf apheleia
    :ensure t
    :hook ((nix-ts-mode-hook astro-ts-mode-hook) . apheleia-mode)
    :commands apheleia-mode
    :config
    (setopt apheleia-formatters-respect-indent-level nil)
    (add-to-list 'apheleia-formatters '(prettier-astro . ("apheleia-npx" "prettier" "--stdin-filepath" filepath
                                                          "--plugin=prettier-plugin-astro" "--parser=astro")))
    (add-to-list 'apheleia-mode-alist '(astro-ts-mode . prettier-astro))
    (add-to-list 'apheleia-mode-alist '(scss-ts-mode . prettier-scss)))
#+end_src
** [[https://github.com/casouri/expreg][expreg]]
現在のポイントを中心にリージョン(選択範囲)を広げていく。
個人的Emacsのキラープラグインの一つ。コピペエンジニアとしてはこれがないとまともに編集できない。
#+begin_src emacs-lisp :tangle yes
  (leaf expreg
    :ensure t
    :bind (("C-z" . expreg-expand)
           ("C-M-z" . expreg-contract)))
#+end_src
* LSP
** eglot
#+begin_src emacs-lisp :tangle yes
  (leaf eglot
    :hook (((yaml-ts-mode-hook nix-ts-mode-hook html-ts-mode-hook css-ts-mode-hook astro-ts-mode) . eglot-ensure))
    :bind (:eglot-mode-map
           ("C-c l r r" . my/eglot-rename)
           ("C-c l a" . eglot-code-actions))
    :config
    (add-to-list 'eglot-server-programs '(nix-ts-mode . ("nil")))

    (defun my/eglot-rename ()
      "eglot-renameの改良版"
      (interactive)
      (if-let* ((symbol (thing-at-point 'symbol t))
                (newname (string-trim
                          (read-from-minibuffer (format "Rename `%s' to: " symbol) symbol))))
          (cond ((string-empty-p newname)
                 (user-error "空の名前は受け付けません"))
                ((string-search " " newname)
                 (user-error "ホワイトスペースを含む変数名はダメでしょ"))
                ((string= symbol newname)
                 (user-error "元の名前と同じやん"))
                (t
                 (eglot-rename newname)))
        (user-error "ポイントにシンボルがないです"))))
#+end_src
*** [[https://github.com/jdtsmith/eglot-booster][eglot-booster]]
#+begin_src emacs-lisp :tangle yes
  (leaf eglot-booster
    :ensure t
    :custom ((eglot-booster-io-only . t))
    :global-minor-mode t)
#+end_src
*** [[https://github.com/mohkale/consult-eglot][consult-eglot]]
#+begin_src emacs-lisp :tangle yes
  (leaf consult-eglot
    :ensure t
    :bind (:eglot-mode-map
           ("M-g e" . consult-eglot-symbols)))
#+end_src
*** [[https://codeberg.org/mekeor/eglot-signature-eldoc-talkative][eglot-signature-eldoc-talkative]]
#+begin_src emacs-lisp :tangle yes
  (leaf eglot-signature-eldoc-talkative
    :ensure t
    :commands eglot-signature-eldoc-talkative
    :config
    (advice-add #'eglot-signature-eldoc-function
                :override #'eglot-signature-eldoc-talkative))
#+end_src
** [[https://github.com/jadestrong/lsp-proxy][lsp-proxy]] rust製 LSPクランアント
#+begin_src emacs-lisp :tangle yes
  (leaf lsp-proxy
    :ensure t
    :require t
    ;; :hook ((astro-ts-mode-hook . lsp-proxy-mode))
    :config
    (setopt lsp-proxy-user-languages-config (no-littering-expand-etc-file-name "languages.toml"))
    (setopt lsp-proxy-diagnostics-provider :flymake)
    (setopt lsp-proxy-log-file-directory (no-littering-expand-var-file-name "lsp-proxy-logs/"))
    (setopt lsp-proxy-log-max 1000000)
    (setopt lsp-proxy-log-level 3))
#+end_src

* メジャーモード
** [[https://github.com/llemaitre19/jtsx][jtsx-mode]] jsx tsxに対応したモード
#+begin_src emacs-lisp :tangle yes
  (leaf jtsx
    :doc "Extends JSX/TSX built-in support"
    :url "https://github.com/llemaitre19/jtsx"
    :ensure t
    :defvar (jtsx-jsx-mode-map jtsx-tsx-mode-map)
    :defun (my-jtsx-bind-keys-to-mode-map)
    :mode ((("\\.jsx?\\'" "\\.mjs\\'" "\\.cjs\\'") . jtsx-jsx-mode)
           ("\\.tsx\\'" . jtsx-tsx-mode)
           ("\\.ts\\'" . jtsx-typescript-mode))
    :hook ((jtsx-jsx-mode-hook . my-jtsx-bind-keys-to-jtsx-jsx-mode-map)
           (jtsx-tsx-mode-hook . my-jtsx-bind-keys-to-jtsx-tsx-mode-map))
    :custom ((js-indent-level . 2)
             (typescript-ts-mode-indent-offset . 2)
             (jtsx-switch-indent-offset . 0)
             (jtsx-indent-statement-block-regarding-standalone-parent . nil)
             (jtsx-jsx-element-move-allow-step-out . t)
             (jtsx-enable-jsx-electric-closing-element . t)
             (jtsx-enable-electric-open-newline-between-jsx-element-tags . t)
             ;; (jtsx-enable-jsx-element-tags-auto-sync . nil)
             (jtsx-enable-all-syntax-highlighting-features . t))
    :config
    (defun my-jtsx-bind-keys-to-mode-map (mode-map)
      "Bind keys to MODE-MAP."
      (define-key mode-map (kbd "C-c C-j") 'jtsx-jump-jsx-element-tag-dwim)
      (define-key mode-map (kbd "C-c j o") 'jtsx-jump-jsx-opening-tag)
      (define-key mode-map (kbd "C-c j c") 'jtsx-jump-jsx-closing-tag)
      (define-key mode-map (kbd "C-c j r") 'jtsx-rename-jsx-element)
      (define-key mode-map (kbd "C-c <down>") 'jtsx-move-jsx-element-tag-forward)
      (define-key mode-map (kbd "C-c <up>") 'jtsx-move-jsx-element-tag-backward)
      (define-key mode-map (kbd "C-c C-<down>") 'jtsx-move-jsx-element-forward)
      (define-key mode-map (kbd "C-c C-<up>") 'jtsx-move-jsx-element-backward)
      (define-key mode-map (kbd "C-c C-S-<down>") 'jtsx-move-jsx-element-step-in-forward)
      (define-key mode-map (kbd "C-c C-S-<up>") 'jtsx-move-jsx-element-step-in-backward)
      (define-key mode-map (kbd "C-c j w") 'jtsx-wrap-in-jsx-element)
      (define-key mode-map (kbd "C-c j u") 'jtsx-unwrap-jsx)
      (define-key mode-map (kbd "C-c j d n") 'jtsx-delete-jsx-node)
      (define-key mode-map (kbd "C-c j d a") 'jtsx-delete-jsx-attribute)
      (define-key mode-map (kbd "C-c j t") 'jtsx-toggle-jsx-attributes-orientation)
      (define-key mode-map (kbd "C-c j h") 'jtsx-rearrange-jsx-attributes-horizontally)
      (define-key mode-map (kbd "C-c j v") 'jtsx-rearrange-jsx-attributes-vertically))

    (defun my-jtsx-bind-keys-to-jtsx-jsx-mode-map ()
      (my-jtsx-bind-keys-to-mode-map jtsx-jsx-mode-map))

    (defun my-jtsx-bind-keys-to-jtsx-tsx-mode-map ()
      (my-jtsx-bind-keys-to-mode-map jtsx-tsx-mode-map)))
#+end_src
** [[https://github.com/Sorixelle/astro-ts-mode][astro-ts-mode]]
#+begin_src emacs-lisp :tangle yes
  (leaf astro-ts-mode
    :ensure t
    :mode "\\.astro\\'")
#+end_src
** mermaid-mode
#+begin_src emacs-lisp :tangle yes
  (leaf mermaid-mode
    :doc "Major mode for working with mermaid graphs"
    :url "https://github.com/abrochard/mermaid-mode"
    :ensure t)
#+end_src
* org-mode
#+begin_src emacs-lisp :tangle yes
  (leaf org
    :doc "Outline-based notes management and organizer"
    :require t
    :bind (org-mode-map
           ;; superを小文字のsでバインドし直さないと呼び出せない。そういうもんだっけ？
           ("M-s-RET" . org-insert-todo-heading)
           ("M-s-<return>" . org-insert-todo-heading)
           ("C-s-RET" . org-insert-todo-heading-respect-content)
           ("C-s-<return>" . org-insert-todo-heading-respect-content)
           ("M-s-<left>" . org-promote-subtree)
           ("M-s-<right>" . org-demote-subtree))
    :hook ((org-mode-hook . my/setup-org-mode))
    :config
    (setopt org-directory "~/ghq/github.com/yasushiasahi/org")
    (setopt org-M-RET-may-split-line nil)
    (setopt org-use-speed-commands t)
    (setopt org-startup-indented t)

    ;; begin_の後に続くブロックのテンプレートを追加
    (add-to-list 'org-structure-template-alist '("," . "src emacs-lisp :tangle yes"))

    (defun my/setup-org-mode ()
      "保存前に行末のスペースを削除"
      (add-hook 'before-save-hook 'delete-trailing-whitespace nil 'make-it-local)))
#+end_src
** org-capture
#+begin_src emacs-lisp :tangle yes
  (leaf org-capture
    :doc "Fast note taking in Org"
    :tag "builtin" "text" "calendar" "hypermedia" "outlines"
    :url "https://orgmode.org"
    :bind (("C-c c" . org-capture))
    :config
    (setopt org-capture-templates `(("n" "Memo" entry
                                     (file+headline ,(expand-file-name "memo.org" org-directory) "Memos")
                                     "* %?\nEntered on %U\n %i\n %a"))))
#+end_src
** かっこいい見た目にする [[https://github.com/minad/org-modern/tree/main][org-modern]]
#+begin_src emacs-lisp :tangle yes
  (leaf org-modern
    :ensure t
    :hook ((org-mode-hook . org-modern-mode)
           (org-agenda-finalize-hook . org-modern-agenda))
    :config
    (setopt org-modern-star 'replace)

    (setopt org-auto-align-tags nil)
    (setopt org-tags-column 0)
    (setopt org-catch-invisible-edits 'show-and-error)
    (setopt org-special-ctrl-a/e t)
    (setopt org-insert-heading-respect-content t)

    (setopt org-hide-emphasis-markers t)
    (setopt org-pretty-entities t)
    (setopt org-agenda-tags-column 0))
#+end_src
*** org-modernをindentに対応させる [[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]]
#+begin_src emacs-lisp :tangle yes
  (leaf org-modern-indent
    :ensure t
    :hook ((org-modern-mode-hook . org-modern-indent-mode))
    :config
    (set-face-attribute 'org-modern-symbol nil :family "Iosevka")
    (set-face-attribute 'org-modern-indent-bracket-line nil :family "Iosevka")
    (set-face-attribute 'org-modern-block-name nil :family "Iosevka")
    (set-face-attribute 'org-block-begin-line nil :underline nil :family "Iosevka")
    (set-face-attribute 'org-block-end-line nil :overline nil :family "Iosevka")
    (set-face-attribute 'org-block nil :background "#001e27"))
#+end_src
** org-src
#+begin_src emacs-lisp :tangle yes
  (leaf org-src
    :require t
    :config
    (setopt org-src-window-setup 'current-window)
    (setopt org-src-tab-acts-natively nil))
#+end_src
*** ob-mermaid
#+begin_src emacs-lisp :tangle yes
  (leaf ob-mermaid
    :doc "Org-babel support for mermaid evaluation"
    :url "https://github.com/arnm/ob-mermaid"
    :ensure t)
  (org-babel-do-load-languages 'org-babel-load-languages '((mermaid . t)))
  (add-to-list 'org-src-lang-modes '("mermaid" . mermaid))
#+end_src
*** ob-typescript
#+begin_src emacs-lisp :tangle yes
  (leaf ob-typescript
    :doc "Org-babel functions for typescript evaluation"
    :url "https://github.com/lurdan/ob-typescript"
    :ensure t)
  (org-babel-do-load-languages 'org-babel-load-languages '((typescript . t)))
  (add-to-list 'org-src-lang-modes '("typescript" . jtsx-typescript))
#+end_src
* AI
** ellama
#+begin_src emacs-lisp :tangle yes
  (leaf ellama
    :doc "Tool for interacting with LLMs"
    :when (executable-find "ollama")
    :ensure t
    :require llm-ollama
    :bind (("C-c e" . ellama))
    :hook ((org-ctrl-c-ctrl-c-hook . ellama-chat-send-last-message)))
#+end_src
** chatgpt-shell
#+begin_src emacs-lisp :tangle yes
  (leaf shell-maker
    :doc "Interaction mode for making comint shells."
    :url "https://github.com/xenodium/shell-maker"
    :ensure t)

  (leaf chatgpt-shell
    :doc "A family of utilities to interact with LLMs (ChatGPT, Claude, DeepSeek, Gemini, Kagi, Ollama, Perplexity)"
    :url "https://github.com/xenodium/chatgpt-shell"
    :ensure t
    :require t
    :config
    (setopt chatgpt-shell-model-version "gemma3:12b-it-qat")
    (add-to-list 'chatgpt-shell-models
                 (chatgpt-shell-ollama-make-model
                  :version "gemma3:12b-it-qat"
                  :token-width 8
                  :context-window 131072))
    (add-to-list 'chatgpt-shell-models
                 (chatgpt-shell-ollama-make-model
                  :version "gemma3:4b-it-qat"
                  :token-width 8
                  :context-window 131072))
    (add-to-list 'chatgpt-shell-models
                 (chatgpt-shell-ollama-make-model
                  :version "qwen2.5-coder:14b"
                  :token-width 8
                  :context-window 131072))
    (add-to-list 'chatgpt-shell-models
                 (chatgpt-shell-ollama-make-model
                  :version "qwen2.5-coder:7b"
                  :token-width 8
                  :context-window 131072)))
#+end_src
** [[https://github.com/karthink/gptel][シンプルなLLMのクライアント gptel]]
無料、有料、ローカル問わずほとんどのモデルに対応している。
いかなるバッファからでもでサクッと使える。
#+begin_src emacs-lisp :tangle yes
  (leaf gptel
    :ensure t
    :commands (gptel gptel-menu gptel-send)
    :config
    (setopt gptel-temperature 0.0)
    (setopt gptel-org-branching-context t)
    (setopt gptel-default-mode 'org-mode)

    (setopt gptel-model 'gpt-4.5-preview)
    (setopt gptel-backend (gptel-make-gh-copilot "Copilot"))

    (gptel-make-gemini "Gemini" :stream t))
#+end_src
** [[https://github.com/copilot-emacs/copilot.el?tab=readme-ov-file][copilot]] github copilotプラグイン
#+begin_src emacs-lisp :tangle yes
  (leaf copilot
    :ensure t
    :commands copilot-mode
    :config
    (add-to-list 'copilot-major-mode-alist '("jtsx-typescript" . "typescript"))
    (add-to-list 'copilot-major-mode-alist '("jtsx-tsx" . "typescriptreact"))
    (add-to-list 'copilot-major-mode-alist '("astro-ts" . "typescriptreact")))
#+end_src
** [[https://github.com/chep/copilot-chat.el][copilot-chat]] copilotとチャットできる
#+begin_src emacs-lisp :tangle yes
  (leaf copilot-chat
    :ensure t
    :hook ((git-commit-setup-hook . copilot-chat-insert-commit-message))
    :config
    (let ((my/copilot-chat-prompt "日本語で解答してください。\nあなたは一流のコーディングチューターです。コードの説明は、高レベルな概念と詳細な内容のバランスが完璧です。あなたのアプローチにより、学習者はコードの書き方だけでなく、効果的なプログラミングを導く基本原理も理解できます。\n名前を尋ねられた場合、必ず「GitHub Copilot」と答えてください。\nユーザーの要件を正確かつ厳密に守ってください。\n専門知識はソフトウェア開発トピックに厳密に限定されています。\nMicrosoft のコンテンツポリシーに従ってください。\n著作権を侵害する内容は避けてください。\nソフトウェア開発に関連しない質問には、AIプログラミングアシスタントであることを簡単に伝えるだけにしてください。\n回答は簡潔かつ非個人的なものにしてください。\nMarkdown形式を使用して回答してください。\nコードブロックの最初にプログラミング言語名を必ず記述してください。\n全体を三重バッククオートで囲まないようにしてください。\nユーザーは Neovim という IDE を使用しています。この IDE には、開いているファイルのエディタ、統合ユニットテストサポート、コード実行結果を表示する出力ペイン、統合ターミナルがあります。\nアクティブなドキュメントは、ユーザーが現在見ているソースコードです。\n1 回の会話で 1 つの回答しかできません。\n\n追加ルール\nステップごとに考えてください：\n1. 提供されたコード選択部分やユーザーの質問、関連するエラー、プロジェクトの詳細、クラス定義などを確認します。\n2. コードや概念、ユーザーの質問が不明確な場合は、明確化する質問を行います。\n3. ユーザーが特定の質問やエラーを提供している場合は、選択されたコードと追加のコンテキストに基づいて答えてください。それ以外の場合は、選択されたコードの説明に集中します。\n4. コードの可読性やパフォーマンス向上の機会があれば、提案を行ってください。\n\n簡潔でわかりやすく、かつ徹底的な説明を心がけ、広範な予備知識があると仮定しないでください。\n開発者に親しみやすい用語やアナロジーを使用してください。\n注意すべき点や、初心者が見落としがちな部分を指摘してください。\n提供されたコンテキストに沿った具体的で関連性の高い例を示してください。\n"))
      (setopt copilot-chat-markdown-prompt my/copilot-chat-prompt)
      (setopt copilot-chat-org-prompt my/copilot-chat-prompt))

    (setopt copilot-chat-commit-prompt
            (string-join (list
                          "Step 1: Review the English commit message as instructed below.
  Step 2: Output a Japanese translation of the commit message that preserves its structure. Do not include the original English text in the output."
                          copilot-chat-commit-prompt)
                         "\n\n"))
    )
#+end_src
* ターミナル
** [[https://github.com/szermatt/mistty][mistty]]
#+begin_src emacs-lisp :tangle yes
  (leaf mistty
    :doc "Shell/Comint alternative based on term.el."
    :tag "unix" "convenience" "emacs>=29.1"
    :ensure t)
#+end_src

* ユースケース
** 特定のバッファーのポイントを記録してどこからでもその位置にジャンプする
- =C-x r SPC r=(point-to-register) ポイントの記録
- =C-x r j r=(jump-to-register) 記録したポイントへジャンプ
https://ayatakesi.github.io/emacs/25.1/Position-Registers.html#Position-Registers
* Footer
#+begin_src emacs-lisp :tangle yes
  (provide 'init)

  ;;; init.el ends here
#+end_src
